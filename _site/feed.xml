<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.5">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2019-05-23T18:14:50+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">tail -f pinzo.log</title><subtitle>pinzolo の技術系 blog</subtitle><entry><title type="html">Swiftで画像が左寄せでタイトルが中央なボタンを作る</title><link href="http://localhost:4000/2019/05/23/left-image-and-center-title-button.html" rel="alternate" type="text/html" title="Swiftで画像が左寄せでタイトルが中央なボタンを作る" /><published>2019-05-23T12:40:28+09:00</published><updated>2019-05-23T12:40:28+09:00</updated><id>http://localhost:4000/2019/05/23/left-image-and-center-title-button</id><content type="html" xml:base="http://localhost:4000/2019/05/23/left-image-and-center-title-button.html">&lt;p&gt;4月に転職して現在初めて iOS の改修をやっている。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/20190523_image1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;こんな感じのデザインを実装することになって非常に困った。&lt;/p&gt;

&lt;p&gt;まずデフォルトで画像とタイトルを表示するとこんな風になる。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/20190523_image2.png&quot; alt=&quot;&quot; /&gt;
これの画像だけを左側に固定しタイトルは長さに合わせてセンタリングしたい。&lt;/p&gt;

&lt;p&gt;左揃えを &lt;code class=&quot;highlighter-rouge&quot;&gt;imageEdgeInsets.left&lt;/code&gt; と &lt;code class=&quot;highlighter-rouge&quot;&gt;titleEdgeInsets.left&lt;/code&gt; を操作するして似たような事は先日やったのだが、これだとタイトルのセンタリングが大変。文字の幅の自動計算とかやりたくない。&lt;/p&gt;

&lt;p&gt;Swift 初めて2ヶ月の iOS App の API どころか Swift の構文すらまだまだ怪しい状態なので当たりも付けづらく、ぐぐってみてもなかなか有用な情報を見つけられなかった。&lt;/p&gt;

&lt;p&gt;とはいえ一晩あけるとなんとなくピンとくる物もあって &lt;code class=&quot;highlighter-rouge&quot;&gt;imageRectForContentRect(_ contentRect: CGRect) -&amp;gt; CGRect&lt;/code&gt; を override すれば出来そうな気がしてきたので試してみた。&lt;/p&gt;

&lt;p&gt;まずはデフォルトの状態でどんな &lt;code class=&quot;highlighter-rouge&quot;&gt;CGRect&lt;/code&gt; を返しているのかを調べよう。&lt;/p&gt;

&lt;p&gt;なんと現在は &lt;code class=&quot;highlighter-rouge&quot;&gt;imageRect(forContentRect contentRect: CGRect) -&amp;gt; CGRect&lt;/code&gt; に名前が変わっているようだ。&lt;br /&gt;
この2ヶ月近く Swift をやって、こういう非互換に腐るほど出会ってきた。enum の名前が全然違っていて &lt;code class=&quot;highlighter-rouge&quot;&gt;FooBarNormal&lt;/code&gt; を &lt;code class=&quot;highlighter-rouge&quot;&gt;.normal&lt;/code&gt; に直すとかザラだ。&lt;br /&gt;
おかげでググった結果が陳腐化していることも多々である。さっさと落ち着いてくれ。&lt;/p&gt;

&lt;p&gt;とまあ Swift の愚痴は置いておいてとりあえずこんなコードを仕込んだ。&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;LeftFixedImageButton&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIButton&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;imageRect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;forContentRect&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;contentRect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CGRect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CGRect&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;rect&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;imageRect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;forContentRect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;contentRect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rect&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;(123.5, 18.0, 24.0, 24.0)
(131.5, 18.0, 24.0, 24.0)
(151.0, 18.0, 24.0, 24.0)
(151.0, 18.0, 24.0, 24.0)
(143.0, 18.0, 24.0, 24.0)
(143.0, 18.0, 24.0, 24.0)
(151.0, 18.0, 24.0, 24.0)
(151.0, 18.0, 24.0, 24.0)
(143.0, 18.0, 24.0, 24.0)
(143.0, 18.0, 24.0, 24.0)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;よしよし、この &lt;code class=&quot;highlighter-rouge&quot;&gt;CGRect&lt;/code&gt; は &lt;code class=&quot;highlighter-rouge&quot;&gt;UIButton&lt;/code&gt; 内部での相対座標になっているっぽい。なので、x だけ固定化した &lt;code class=&quot;highlighter-rouge&quot;&gt;CGRect&lt;/code&gt; を返してやれば良さそうだ。&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;LeftFixedImageButton&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIButton&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;imageRect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;forContentRect&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;contentRect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CGRect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CGRect&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;rect&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;imageRect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;forContentRect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;contentRect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CGRect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;20.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;minY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;本来なら &lt;code class=&quot;highlighter-rouge&quot;&gt;@IBDesignable&lt;/code&gt; と &lt;code class=&quot;highlighter-rouge&quot;&gt;@IBInspectable&lt;/code&gt; を使って外部から値を設定できるようにするべきなのかもしれないが、設定ミスがあって画面によって画像の位置がずれるとかになっても困るので固定値とした。&lt;/p&gt;

&lt;p&gt;これの結果、こんな風に表示された。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/20190523_image3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;なんか微妙にタイトルがずれている気がする。少し考えて、これはもともと画像込みでセンタリングされているから画像の分だけずらす必要があるなと思った。&lt;/p&gt;

&lt;p&gt;で当然 &lt;code class=&quot;highlighter-rouge&quot;&gt;titleRect(forContentRect contentRect: CGRect) -&amp;gt; CGRect&lt;/code&gt; もあるわけなのでこんな風にしてみた。&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;LeftFixedImageButton&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIButton&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;titleRect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;forContentRect&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;contentRect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CGRect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CGRect&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;rect&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;titleRect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;forContentRect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;contentRect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CGRect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;minX&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;24.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;minY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;imageRect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;forContentRect&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;contentRect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CGRect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CGRect&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;rect&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;imageRect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;forContentRect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;contentRect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CGRect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;20.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;minY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/20190523_image4.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;うーん、ずれすぎている。ああ、センタリングだから画像の半分だけずらさないと行けないのか。&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;LeftFixedImageButton&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIButton&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;titleRect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;forContentRect&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;contentRect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CGRect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CGRect&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;rect&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;titleRect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;forContentRect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;contentRect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;imgView&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;imageView&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CGRect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;minX&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;imgView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;width&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;minY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rect&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;imageRect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;forContentRect&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;contentRect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CGRect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CGRect&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;rect&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;imageRect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;forContentRect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;contentRect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CGRect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;20.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;minY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;画像のあるなし、画像のサイズが違うことも考慮してこうしてみた。これでようやく目的が達成できた。良かった&lt;/p&gt;</content><author><name></name></author><category term="swift" /><summary type="html">4月に転職して現在初めて iOS の改修をやっている。</summary></entry><entry><title type="html">text/templateをベースにした 2way SQL ライブラリ</title><link href="http://localhost:4000/2018/12/24/2way-sql-with-text-template.html" rel="alternate" type="text/html" title="text/templateをベースにした 2way SQL ライブラリ" /><published>2018-12-24T01:07:16+09:00</published><updated>2018-12-24T01:07:16+09:00</updated><id>http://localhost:4000/2018/12/24/2way-sql-with-text-template</id><content type="html" xml:base="http://localhost:4000/2018/12/24/2way-sql-with-text-template.html">&lt;h2 id=&quot;tldr&quot;&gt;TL;DR&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;text/template&lt;/code&gt; の機能を使った 2way SQL のライブラリ &lt;a href=&quot;https://github.com/pinzolo/sqlt&quot;&gt;pinzolo/sqlt: Simple SQL template for 2 way SQL.&lt;/a&gt; を作ったよ。&lt;/p&gt;

&lt;h2 id=&quot;動機&quot;&gt;動機&lt;/h2&gt;

&lt;p&gt;クエリビルダのスタイルは様々あってどれがよいなどの議論は他に任せるとして、 個人的にはSQLはガンガン書きたい人です。&lt;br /&gt;
RDBの能力をちゃんと引き出すにはSQLの知識は必須だし、まあなんかいろいろ思うところがあってSQLを直接書いた方がいろいろ効率的だと思ってる。&lt;br /&gt;
そんなわけで業務ではJavaなので 2way SQL を採用している&lt;a href=&quot;https://doma.readthedocs.io/ja/stable/&quot;&gt;Doma&lt;/a&gt; というライブラリがお気に入り。&lt;/p&gt;

&lt;p&gt;その 2way SQL を Go でも使いたいと思うが、自分が調べた範囲ではなかなか完成度の高い物が見つけられなかった。&lt;br /&gt;
そんならとりあえず自分が使うに耐える物程度の物でいいので自作するかと思ったが scanner 書くのたりいなと思ってた。（それが正道なんだけど）&lt;/p&gt;

&lt;p&gt;そんな中で出会ったのが &lt;code class=&quot;highlighter-rouge&quot;&gt;text/template&lt;/code&gt; の &lt;code class=&quot;highlighter-rouge&quot;&gt;Template.Delims&lt;/code&gt; だった。これは要するに、本来は &lt;code class=&quot;highlighter-rouge&quot;&gt;{{&lt;/code&gt; と &lt;code class=&quot;highlighter-rouge&quot;&gt;}}&lt;/code&gt;で囲まれたところが処理されるのだがその文字を変換できる仕組みである。&lt;br /&gt;
これをSQLフレンドリーにすればお手軽に 2way SQL ライブラリを作れるのではないか？と思ったので作ってみた。&lt;/p&gt;

&lt;h2 id=&quot;how-to-use&quot;&gt;How to use?&lt;/h2&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;users&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;WHERE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;IN&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/*% in &quot;ids&quot; %*/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;AND&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/*% p &quot;name&quot; %*/&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'John Doe'&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;/*%- if val &quot;onlyMale&quot; %*/&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;AND&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sex&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'MALE'&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;/*%- end %*/&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;ORDER&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;BY&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/*% val &quot;order&quot; %*/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;こんなSQLテンプレートを書いて&lt;/p&gt;

&lt;div class=&quot;language-go highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sqlt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;New&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sqlt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Postgres&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Exec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;interface&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{}{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ids&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;      &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;order&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;name DESC&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;onlyMale&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;     &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Alex&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rows&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sql&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;こんな感じで実行すれば&lt;/p&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;users&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;WHERE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;IN&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;AND&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;ORDER&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;BY&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;DESC&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;こんなSQLが実行される。(PostgreSQL)&lt;/p&gt;

&lt;h2 id=&quot;texttemplate-を使うメリット&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;text/template&lt;/code&gt; を使うメリット&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;if&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;for&lt;/code&gt; といった制御構文を自作する必要が無い&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;eq&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;and&lt;/code&gt; といった比較処理を自作する必要が無い（&lt;code class=&quot;highlighter-rouge&quot;&gt;==&lt;/code&gt; や &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;amp;&amp;amp;&lt;/code&gt; の方がいいという意見はある）&lt;/li&gt;
  &lt;li&gt;custom func を登録できるので様々な SQL 向けの処理を差し込める&lt;/li&gt;
  &lt;li&gt;Goを使う人なら構文を覚え直す必要が無い（ちなみに私はまだ慣れてない）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;というように 2way SQL に必須な機能の一部はすでに &lt;code class=&quot;highlighter-rouge&quot;&gt;text/template&lt;/code&gt; が提供してくれる。&lt;br /&gt;
あと個人的に前後の空白削除の機能があるのは非常にうれしい。&lt;/p&gt;

&lt;h2 id=&quot;texttemplate-を使うデメリット&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;text/template&lt;/code&gt; を使うデメリット&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;自作 scanner パターンよりもパフォーマンスが出ない（はず）&lt;/li&gt;
  &lt;li&gt;自作 scanner パターンよりも柔軟度が低い&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;sqltが解決すること&quot;&gt;sqltが解決すること&lt;/h2&gt;

&lt;p&gt;sqlt はまあだいたい以下のようなことを機能として持っています。&lt;/p&gt;

&lt;h3 id=&quot;パラメータに名前を付けられる&quot;&gt;パラメータに名前を付けられる&lt;/h3&gt;

&lt;p&gt;いろいろなドライバがあるが &lt;code class=&quot;highlighter-rouge&quot;&gt;sql.NamedArg&lt;/code&gt; に対応しているのが少ない。&lt;br /&gt;
SQLとロジックを二つ並べて順序からエラーのあるパラメータを探るとかしたくない。でかいSQLになると数え間違いによるロスも馬鹿にならない。&lt;br /&gt;
Domaのように静的解析で解決するのも良いが、sqltではリーズナブルに &lt;code class=&quot;highlighter-rouge&quot;&gt;map[string]interface{}&lt;/code&gt; で解決することにした。&lt;/p&gt;

&lt;h3 id=&quot;in句での-slice-展開&quot;&gt;IN句での slice 展開&lt;/h3&gt;

&lt;p&gt;残念ながらほとんどのドライバでは &lt;code class=&quot;highlighter-rouge&quot;&gt;WHERE id IN $1&lt;/code&gt; に対して slice を渡しても展開してくれない。&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;fmt.Sprintf&lt;/code&gt; とか &lt;code class=&quot;highlighter-rouge&quot;&gt;strings.Join&lt;/code&gt; で SQL を構築するとかしたくないし、そもそもSQLを外だしすることが 2way SQL のメリットの1つである。&lt;br /&gt;
sqlt は &lt;code class=&quot;highlighter-rouge&quot;&gt;text/template&lt;/code&gt; ベースなので custom func とリフレクションで解決できた。&lt;/p&gt;

&lt;h3 id=&quot;like検索&quot;&gt;LIKE検索&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;prefix&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;infix&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;suffix&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;escape&lt;/code&gt; という関数を提供するので &lt;code class=&quot;highlighter-rouge&quot;&gt;'%' || ? || '%'&lt;/code&gt; みたいなことをしなくてもいい。&lt;/p&gt;

&lt;h3 id=&quot;パラメータ役割問題&quot;&gt;パラメータ役割問題&lt;/h3&gt;

&lt;p&gt;これは 2way SQL 独特の問題で、2way SQL において渡すパラメータには3種類ある。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;SQL 実行時に使用されるパラメータ&lt;/li&gt;
  &lt;li&gt;SQL 構築時に使用されるパラメータ&lt;/li&gt;
  &lt;li&gt;その両方に使われるパラメータ&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;である。例えばこんな 2way SQL があったとする。（Doma風）&lt;/p&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;users&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;/* if onlyAvailable */&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;WHERE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;IN&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* availableStatuses */&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;/* end */&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;この場合、&lt;code class=&quot;highlighter-rouge&quot;&gt;onlyAvailable&lt;/code&gt; が true ならば &lt;code class=&quot;highlighter-rouge&quot;&gt;availableStatuses&lt;/code&gt; を渡す必要があるが、false の場合は必要ない。&lt;br /&gt;
SQLだけを生成する 2way SQL ライブラリの場合、この判断をテンプレート内と、SQL実行時に行ってしまうと二度手間である。&lt;br /&gt;
そこで sqlt では SQL の精製時にプレースホルダに置き換えたパラメータの slice を返却している。&lt;br /&gt;
正直なところ、開発時初期にはこれをどうすればいいか悩んでいたのだけれど、&lt;code class=&quot;highlighter-rouge&quot;&gt;text/template&lt;/code&gt; の custom func には純粋な関数だけでなくレシーバをもつメソッドを渡すこともでき（よく考えたら当然だ）レシーバに副作用として呼び出しを記録できることに気がついたら早かった。&lt;/p&gt;

&lt;h2 id=&quot;デリミタについて&quot;&gt;デリミタについて&lt;/h2&gt;

&lt;p&gt;sqlt は &lt;code class=&quot;highlighter-rouge&quot;&gt;/*%&lt;/code&gt; と &lt;code class=&quot;highlighter-rouge&quot;&gt;%*/&lt;/code&gt; で囲むスタイルなので Doma とは異なる。&lt;br /&gt;
というのも本来 &lt;code class=&quot;highlighter-rouge&quot;&gt;text/template&lt;/code&gt; はコメントを許容しており &lt;code class=&quot;highlighter-rouge&quot;&gt;{{/* This is comment */}}&lt;/code&gt; みたいなのが書ける。&lt;br /&gt;
なので Doma の &lt;code class=&quot;highlighter-rouge&quot;&gt;/* ... */&lt;/code&gt; も &lt;code class=&quot;highlighter-rouge&quot;&gt;/*% ... */&lt;/code&gt; もコンフリクトすると思われるので &lt;code class=&quot;highlighter-rouge&quot;&gt;/*% ... %*/&lt;/code&gt; とした。かなり妥協案。&lt;/p&gt;

&lt;h2 id=&quot;sqlインジェクション対策&quot;&gt;SQLインジェクション対策&lt;/h2&gt;

&lt;p&gt;基本的にはプレースホルダに変換しているので安心なのだが別の懸念がある。&lt;/p&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;users&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;ORDER&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;BY&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* order */&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;みたいな 2way SQL は許可したい。しかしこれは容易にSQLインジェクションを生み出してしまう。&lt;br /&gt;
わかってるヤツだけが使えよってライブラリにしてもいいんだけど、超突っ込みポイントであるわけでちゃんとできるならちゃんとしたい。&lt;br /&gt;
そこで少し記述の冗長性を許容することにした。sqlt では &lt;code class=&quot;highlighter-rouge&quot;&gt;Exec&lt;/code&gt; 時に渡されたパラメータは直接テンプレートに渡さず、全て関数経由で取り出すスタイルとした。&lt;/p&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;users&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;ORDER&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;BY&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/*% val &quot;order&quot; %*/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;こんな感じで SQL に直接埋め込むには &lt;code class=&quot;highlighter-rouge&quot;&gt;val&lt;/code&gt; 関数経由でやるようにした。&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;val&lt;/code&gt; 関数は値にシングルコーテーション、セミコロン、コメント（&lt;code class=&quot;highlighter-rouge&quot;&gt;--&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;/*&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;*/&lt;/code&gt;）が含まれている場合エラーとしている。&lt;br /&gt;
これは&lt;a href=&quot;https://doma.readthedocs.io/ja/stable/sql/#id13&quot;&gt;Domaの埋め込み変数コメント&lt;/a&gt;を参考にしているがまだ調査不足なところがある。&lt;br /&gt;
というのも Oracle での複文区切りは本来は &lt;code class=&quot;highlighter-rouge&quot;&gt;/&lt;/code&gt; なのだが Doma では考慮されていない。これはおそらく JDBC がよしなにやっているからのような気がする。&lt;br /&gt;
Go の &lt;code class=&quot;highlighter-rouge&quot;&gt;database/sql&lt;/code&gt; は複数の結果セットに対応しているので要調査である。この方針にしたのが最近なので調査が間に合ってないという言い訳をしておく。&lt;/p&gt;

&lt;h2 id=&quot;sqltの今後&quot;&gt;sqltの今後&lt;/h2&gt;

&lt;p&gt;今後はがっつりではないけどちまちまのんびりと更新していくつもり。とりあえず &lt;code class=&quot;highlighter-rouge&quot;&gt;Exec&lt;/code&gt; 時にオプションを受け取れるようにしたいので、正直なところ API は破壊的に変わる可能性があります。&lt;/p&gt;

&lt;p&gt;とはいえ production に耐えうる物にはしてきたいので、ご指導ご鞭撻の程よろしくお願いいたします。&lt;/p&gt;</content><author><name></name></author><category term="golang" /><category term="sql" /><summary type="html">TL;DR</summary></entry><entry><title type="html">Avastによってhttps通信が切断された</title><link href="http://localhost:4000/2018/03/24/avast-block-https.html" rel="alternate" type="text/html" title="Avastによってhttps通信が切断された" /><published>2018-03-24T00:15:42+09:00</published><updated>2018-03-24T00:15:42+09:00</updated><id>http://localhost:4000/2018/03/24/avast-block-https</id><content type="html" xml:base="http://localhost:4000/2018/03/24/avast-block-https.html">&lt;p&gt;とあるお客さんの基幹システムはオレオレ証明書によるアクセス制限を行っていて、そこにアクセスする必要が出たので証明書をインストールした。&lt;br /&gt;
ちゃんとキーチェーンアクセスにも正常に登録されたのだが、いざ基幹システムにアクセスすると「接続は切断されました」となる。&lt;br /&gt;
どうやらウィルス対策ソフトの Avast がセキュリティ保護された通信をスキャンして切断していたようだ。&lt;br /&gt;
設定→シールド→ウェブシールドと開き、除外するサーバーにその基幹システムを登録したら無事にアクセスできた。&lt;/p&gt;</content><author><name></name></author><category term="security" /><category term="mac" /><summary type="html">とあるお客さんの基幹システムはオレオレ証明書によるアクセス制限を行っていて、そこにアクセスする必要が出たので証明書をインストールした。 ちゃんとキーチェーンアクセスにも正常に登録されたのだが、いざ基幹システムにアクセスすると「接続は切断されました」となる。 どうやらウィルス対策ソフトの Avast がセキュリティ保護された通信をスキャンして切断していたようだ。 設定→シールド→ウェブシールドと開き、除外するサーバーにその基幹システムを登録したら無事にアクセスできた。</summary></entry><entry><title type="html">golang振り返り</title><link href="http://localhost:4000/2017/12/05/retrospective-of-my-golang-work.html" rel="alternate" type="text/html" title="golang振り返り" /><published>2017-12-05T21:12:53+09:00</published><updated>2017-12-05T21:12:53+09:00</updated><id>http://localhost:4000/2017/12/05/retrospective-of-my-golang-work</id><content type="html" xml:base="http://localhost:4000/2017/12/05/retrospective-of-my-golang-work.html">&lt;p&gt;これは &lt;a href=&quot;https://qiita.com/advent-calendar/2017/go4&quot;&gt;Go4 Advent Calendar 2017 - Qiita&lt;/a&gt; 5日目の記事です。&lt;/p&gt;

&lt;p&gt;プライベートで Go を書き始めてどうやら１年半以上たっているらしい。年末だしアドベントカレンダーということで自分のリポジトリとともに振り返ってみる。&lt;/p&gt;

&lt;h2 id=&quot;きっかけ&quot;&gt;きっかけ&lt;/h2&gt;

&lt;p&gt;Go 言語にはなんかはやり始めてる感じだなーという興味を持ってたと思う。んで、ちょっとした自分が仕事で使うようなコマンドラインツールを作ろうとしたときについでだし試してみるかと触ってみたのが最初。&lt;br /&gt;
内の会社は BYOD が認められているのでいざ他の人に配布することになったときに Windows, Mac, Linux 全部で動くというのは大きいと思った。&lt;br /&gt;
あと、会社のだれも触ってないみたいなので Go 使えるヤツがひとりぐらいいた方が面白いだろうというのもあった&lt;/p&gt;

&lt;h2 id=&quot;pinzolocasee&quot;&gt;&lt;a href=&quot;https://github.com/pinzolo/casee&quot;&gt;pinzolo/casee&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;最初に作ったライブラリ。文字列をsnake_case やら PascalCase やら camelCase の変換を行うライブラリ。&lt;br /&gt;
コード生成系のコマンドラインツールを作る予定があったのでお試しがてら作ってみた。&lt;br /&gt;
たしか vim-go を入れただけの環境で開発したと思う。おかげでコメントとか &lt;code class=&quot;highlighter-rouge&quot;&gt;golint&lt;/code&gt; に怒られるスタイルになってる。&lt;/p&gt;

&lt;h2 id=&quot;pinzolodbmodel-pinzolotablarian&quot;&gt;&lt;a href=&quot;https://github.com/pinzolo/dbmodel&quot;&gt;pinzolo/dbmodel&lt;/a&gt;, &lt;a href=&quot;https://github.com/pinzolo/tablarian&quot;&gt;pinzolo/tablarian&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;tablarian&lt;/code&gt; はコマンドラインでDBに直接アクセスしテーブル定義をコンソールに表示するツール。（現在PostgreSQL専用）&lt;br /&gt;
弊社にはブラウザベースでのテーブル定義管理ツールがあるが、いちいちブラウザからアクセスするのめんどくさいし実際のDBとの乖離があったりしてたので、なら直接DBから定義引いたほうが便利じゃないか？と思って作った。&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;dbmodel&lt;/code&gt; はテーブルなどのメタデータのモデリングで、当時はまだ Go でコマンドラインツールを作成する際のパッケージ戦略を理解しておらず、リポジトリ分けたほうが再利用できていいやんとおもって分けた。正直失敗。&lt;br /&gt;
そこらへんも含めて 2018 年には作り直していきたい。&lt;/p&gt;

&lt;h2 id=&quot;pinzoloysok&quot;&gt;&lt;a href=&quot;https://github.com/pinzolo/ysok&quot;&gt;pinzolo/ysok&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;とあるコミュニティで Slack を利用していて、すぐに要領が一杯になるので自分のあげた画像を一括削除するためのツール。&lt;/p&gt;

&lt;h2 id=&quot;pinzolocsvutil&quot;&gt;&lt;a href=&quot;https://github.com/pinzolo/csvutil&quot;&gt;pinzolo/csvutil&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;CSV に対して様々な操作を行うコマンドラインツール。&lt;br /&gt;
とある案件で複数の CSV ファイルを扱うことがあったんだけど、特定の列は顧客情報を含むためダミーデータにしなければいけなかったり、もとのデータが大きいのでちゃんとCSVの論理行単位で件数削除したり、新規に行を追加・削除したりする必要があったので作った。&lt;br /&gt;
調子に乗ってけっこういろいろな処理を実装したが、特定のサブコマンドではあるオプション指定が必須だったりするのが反省点。&lt;/p&gt;

&lt;p&gt;また、このとき得た知見でLTしたりもした。&lt;br /&gt;
&lt;a href=&quot;https://go-kyoto.connpass.com/event/55599/&quot;&gt;そうだ Go、京都。 - connpass&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://speakerdeck.com/pinzolo/csv&quot;&gt;encoding/csv // Speaker Deck&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;この頃から開発環境として Atom を使い始めた、保存すると自動的にテストが走って、カバレッジ結果もエディタに反映されるのでこれええやんって思った。&lt;/p&gt;

&lt;h2 id=&quot;pinzoloxdgdir&quot;&gt;&lt;a href=&quot;https://github.com/pinzolo/xdgdir&quot;&gt;pinzolo/xdgdir&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;XDG Based directory を扱うためのライブラリ。同様のものはいくつもあるがファイルが存在していないとエラーを吐くものや、各homeしか扱わず毎回アプリケーション名からアクセスしなければいけなかったり、パスが Windows に対応していなかったりとどうにもしっくり来るものがなかったので作った。&lt;br /&gt;
以後の自作ツールでそこそこ活躍している。&lt;/p&gt;

&lt;h2 id=&quot;pinzolotmpl&quot;&gt;&lt;a href=&quot;https://github.com/pinzolo/tmpl&quot;&gt;pinzolo/tmpl&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;コマンドラインのパラメータを指定したテンプレートに適用して結果をはき出すツール。スニペットのようなもの。&lt;br /&gt;
最近の案件では &lt;a href=&quot;https://doma.readthedocs.io/ja/stable/&quot;&gt;Welcome to Doma — Doma 2.0 ドキュメント&lt;/a&gt; を使用していて、ドメインクラスをはき出すために使っていたりする。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pkg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}}.{{.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pkg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}}{{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}};&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;org&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;seasar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;doma&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Domain&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fasterxml&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;jackson&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;annotation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;JsonCreator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Domain&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;valueType&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{{.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}}.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;factoryMethod&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;of&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{{.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}}&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;{{.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}}&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{{.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}}(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{{.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}}&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;JsonCreator&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{{.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{{.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}}&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{{.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}}(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;というテンプレートを &lt;code class=&quot;highlighter-rouge&quot;&gt;~/.local/share/domain.tmpl&lt;/code&gt; に配置して &lt;code class=&quot;highlighter-rouge&quot;&gt;tmpl domain pkg:bar type:String name:UserName&lt;/code&gt; とすれば、下記のコードをはき出す。&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.seasar.doma.Domain&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;com.fasterxml.jackson.annotation.JsonCreator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;foo.value.Value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@Domain&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;valueType&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;factoryMethod&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;of&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UserName&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;UserName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;nd&quot;&gt;@JsonCreator&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UserName&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;UserName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;スニペットでええやんと思われるかもしれないがエディタを選ばないという利点と、json モードがあって引数やパイプ経由で JSON を受け入れることができるのでAPIと連携したりとかできる。&lt;/p&gt;

&lt;h2 id=&quot;pinzolospwd&quot;&gt;&lt;a href=&quot;https://github.com/pinzolo/spwd&quot;&gt;pinzolo/spwd&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;弊社にはまだまだ ssh や psql 時にパスワード入力を求められる環境が残っていて、無味乾燥なランダムパスワードを覚えられない自分のために最初はパスワードをクリップボードにコピーしてくれるツールを作っていた。&lt;br /&gt;
もちろんそんなものは公開できないのでプライベートなリポジトリにおいていたんだけど、それでもソースコードにベタにパスワードが書いてあるのはあまりにもイケてないのでどうしたら良いものかと考えてはいた。&lt;br /&gt;
んで、秘密鍵で暗号化すればいいんじゃないか？皆 ssh の秘密鍵は流出しないように細心の注意を払うだろうから、そこに乗っかればセキュアなパスワード管理ツールになるかもしれないと思って作った。&lt;/p&gt;

&lt;p&gt;JavaScript や TypeScript を書く機会が圧倒的に増えたのと、自動テストやカバレッジ結果の行反映も設定すればできることがわかったので VSCode に乗り換えた。Atom はやっぱりちょっと重い。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.moongift.jp/2017/11/spwd-%e3%83%95%e3%82%a1%e3%82%a4%e3%83%ab%e3%83%99%e3%83%bc%e3%82%b9%e3%81%ae%e3%82%bb%e3%82%ad%e3%83%a5%e3%82%a2%e3%81%aa%e3%83%91%e3%82%b9%e3%83%af%e3%83%bc%e3%83%89%e7%ae%a1%e7%90%86/&quot;&gt;Moongiftに取り上げられてびっくりした。&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;pinzoloflagday&quot;&gt;&lt;a href=&quot;https://github.com/pinzolo/flagday&quot;&gt;pinzolo/flagday&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;つい先日作ったもの。仕事で祝日をいろいろ調査したときに、せっかくなので復習がてら Go のライブラリとして作った。&lt;br /&gt;
&lt;a href=&quot;https://github.com/najeira/jpholiday&quot;&gt;najeira/jpholiday: A package for Japanese holidays with Go&lt;/a&gt; というのがあるのは作った後に知った。&lt;/p&gt;

&lt;p&gt;あえて比較した特徴をあげるとすると&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;一年分の祝日を一括取得できるので日数分処理を呼び出す必要はない&lt;/li&gt;
  &lt;li&gt;内部でキャッシュしている&lt;/li&gt;
  &lt;li&gt;祝日名だけでなく種別など祝日に関するメタデータも取得できる&lt;/li&gt;
  &lt;li&gt;ただしその分、計算して祝日名だけ返す jpholiday よりもメモリをくう&lt;/li&gt;
  &lt;li&gt;祝日の定義を構造体として内部に保持しているので、長い if 文を読み解く必要が無い&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;という感じだろうか。まあ、用途に合わせて好きな方を利用すればよいと思う。&lt;/p&gt;

&lt;h2 id=&quot;来年は&quot;&gt;来年は&lt;/h2&gt;

&lt;p&gt;そろそろ Go で Web サービスを作ったりしてみたい、あと &lt;code class=&quot;highlighter-rouge&quot;&gt;tablarian&lt;/code&gt; は作り直して育てていきたい。&lt;/p&gt;

&lt;h2 id=&quot;というわけで&quot;&gt;というわけで&lt;/h2&gt;

&lt;p&gt;皆様もよい 2018 年 Go life をお過ごしください。&lt;/p&gt;</content><author><name></name></author><category term="golang" /><summary type="html">これは Go4 Advent Calendar 2017 - Qiita 5日目の記事です。</summary></entry><entry><title type="html">flagdayという日本の祝日を Go で扱うライブラリを作った</title><link href="http://localhost:4000/2017/11/28/flagday-library-for-japanese-public-holiday.html" rel="alternate" type="text/html" title="flagdayという日本の祝日を Go で扱うライブラリを作った" /><published>2017-11-28T19:59:52+09:00</published><updated>2017-11-28T19:59:52+09:00</updated><id>http://localhost:4000/2017/11/28/flagday-library-for-japanese-public-holiday</id><content type="html" xml:base="http://localhost:4000/2017/11/28/flagday-library-for-japanese-public-holiday.html">&lt;p&gt;お仕事で祝日を扱う処理を書いたついでに Go で祝日を扱うライブラリを作った。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/pinzolo/flagday&quot;&gt;pinzolo/flagday: flagday is library for public holidays in Japan.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/najeira/jpholiday&quot;&gt;najeira/jpholiday: A package for Japanese holidays with Go&lt;/a&gt; の存在を知ったのは作った後だった。&lt;/p&gt;

&lt;p&gt;気にしない気にしない。&lt;/p&gt;</content><author><name></name></author><category term="golang" /><summary type="html">お仕事で祝日を扱う処理を書いたついでに Go で祝日を扱うライブラリを作った。</summary></entry><entry><title type="html">go-bindata が awesome-go から削除された</title><link href="http://localhost:4000/2017/11/13/go-bindata-was-remove-from-awesome-go.html" rel="alternate" type="text/html" title="go-bindata が awesome-go から削除された" /><published>2017-11-13T19:17:20+09:00</published><updated>2017-11-13T19:17:20+09:00</updated><id>http://localhost:4000/2017/11/13/go-bindata-was-remove-from-awesome-go</id><content type="html" xml:base="http://localhost:4000/2017/11/13/go-bindata-was-remove-from-awesome-go.html">&lt;p&gt;&lt;a href=&quot;http://hatappi.hateblo.jp/entry/2017/11/11/155336&quot;&gt;Goでファイル系のリソースも一緒にビルドして配布しちゃう! - hatappiのブログ&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;こういうエントリがはてブに上がってた。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/avelino/awesome-go/pull/1675&quot;&gt;Remove go-bindata by wjkohnen · Pull Request #1675 · avelino/awesome-go&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://github.com/avelino/awesome-go/commit/6cf33601fc651b4cdd68045d5b6e0a961145953a&quot;&gt;Remove go-bindata (#1675) · avelino/awesome-go@6cf3360&lt;/a&gt;  &lt;br /&gt;
つい先日 go-bindata はメンテナンスされていないという理由で &lt;a href=&quot;https://awesome-go.com/&quot;&gt;Awesome Go&lt;/a&gt; から削除されたので、今後は使わない方がよいと思う。&lt;/p&gt;

&lt;p&gt;じゃあ、何を使えばいいかというと自分の場合は &lt;a href=&quot;https://github.com/jessevdk/go-assets&quot;&gt;jessevdk/go-assets: Simple embedding of assets in go&lt;/a&gt; を使用している。
&lt;a href=&quot;https://github.com/jessevdk/go-assets-builder&quot;&gt;jessevdk/go-assets-builder: Simple assets builder program for go-assets&lt;/a&gt; を使って go ソースを生成し、&lt;code class=&quot;highlighter-rouge&quot;&gt;Assets.Open&lt;/code&gt; 経由で取得できる。ファイルシステムとしてのインターフェースを持っているので &lt;code class=&quot;highlighter-rouge&quot;&gt;Read&lt;/code&gt; や &lt;code class=&quot;highlighter-rouge&quot;&gt;Name&lt;/code&gt; などが直接使えるので便利。&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;go-assets-builder assets &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; assets.go
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-go highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Assets&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/assets/template.tmpl&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;defer&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;みたいな感じで使う。&lt;/p&gt;</content><author><name></name></author><category term="golang" /><summary type="html">Goでファイル系のリソースも一緒にビルドして配布しちゃう! - hatappiのブログ</summary></entry><entry><title type="html">VeeValidateを使ってみる</title><link href="http://localhost:4000/2017/10/25/vee-validate-regex-and-ja-locale.html" rel="alternate" type="text/html" title="VeeValidateを使ってみる" /><published>2017-10-25T23:48:13+09:00</published><updated>2017-10-25T23:48:13+09:00</updated><id>http://localhost:4000/2017/10/25/vee-validate-regex-and-ja-locale</id><content type="html" xml:base="http://localhost:4000/2017/10/25/vee-validate-regex-and-ja-locale.html">&lt;p&gt;Vue.js アプリケーションのバリデーションに &lt;a href=&quot;https://github.com/baianat/vee-validate&quot;&gt;baianat/vee-validate: Simple Vue.js input validation plugin&lt;/a&gt; を使ってみた。いくつかはまったこと。&lt;/p&gt;

&lt;h2 id=&quot;name&quot;&gt;name&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;name&lt;/code&gt; 属性、もしくは &lt;code class=&quot;highlighter-rouge&quot;&gt;data-vv-name&lt;/code&gt; 属性がないとフィールドが特定できない。&lt;/p&gt;

&lt;h2 id=&quot;正規表現&quot;&gt;正規表現&lt;/h2&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text&quot;&lt;/span&gt;
       &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;tel&quot;&lt;/span&gt;
       &lt;span class=&quot;na&quot;&gt;placeholder=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;03-1234-5678&quot;&lt;/span&gt;
       &lt;span class=&quot;na&quot;&gt;v-model=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;tel&quot;&lt;/span&gt;
       &lt;span class=&quot;na&quot;&gt;v-validate=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;'regex:^0[1-9][0-9]{0,4}-[0-9]{1,5}-[0-9]{1,5}$'&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;このように書くと &lt;code class=&quot;highlighter-rouge&quot;&gt;SyntaxError: Invalid flags supplied to RegExp constructor '4}-[0-9]{1,5}-[0-9]{1,5}$'&lt;/code&gt; というエラーが出る。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/baianat/vee-validate/issues/223&quot;&gt;Regex error · Issue #223 · baianat/vee-validate&lt;/a&gt;
によるとこの形式ではパイプやカンマを含む正規表現は動かないらしい。&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text&quot;&lt;/span&gt;
       &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;tel&quot;&lt;/span&gt;
       &lt;span class=&quot;na&quot;&gt;placeholder=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;03-1234-5678&quot;&lt;/span&gt;
       &lt;span class=&quot;na&quot;&gt;v-model=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;tel&quot;&lt;/span&gt;
       &lt;span class=&quot;na&quot;&gt;v-validate=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{ regex: /^0[1-9][0-9]{0,4}-[0-9]{1,5}-[0-9]{1,5}$/ }&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;のようにオブジェクトで書けばよい。また、正規表現オブジェクトではなく文字列でもよい。&lt;/p&gt;

&lt;h2 id=&quot;メッセージの日本語化&quot;&gt;メッセージの日本語化&lt;/h2&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;Vue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;VeeValidate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;locale&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'ja'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;これだけだと &lt;code class=&quot;highlighter-rouge&quot;&gt;You are setting the validator locale to a locale that is not defined in the dictionary. English messages may still be generated.&lt;/code&gt; と警告がでて英語のメッセージになる。&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;VeeValidate&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'vee-validate'&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;VeeValidateJaLocale&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'vee-validate/dist/locale/ja'&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;VeeValidate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Validator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addLocale&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;VeeValidateJaLocale&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;Vue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;VeeValidate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;locale&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'ja'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;としてやる必要がある。&lt;/p&gt;

&lt;p&gt;フィールド名を日本語化するには &lt;code class=&quot;highlighter-rouge&quot;&gt;data-vv-as&lt;/code&gt; 属性を使う。&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text&quot;&lt;/span&gt;
       &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;tel&quot;&lt;/span&gt;
       &lt;span class=&quot;na&quot;&gt;placeholder=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;03-1234-5678&quot;&lt;/span&gt;
       &lt;span class=&quot;na&quot;&gt;data-vv-as=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;電話番号&quot;&lt;/span&gt;
       &lt;span class=&quot;na&quot;&gt;v-model=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;tel&quot;&lt;/span&gt;
       &lt;span class=&quot;na&quot;&gt;v-validate=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{ regex: /^0[1-9][0-9]{0,4}-[0-9]{1,5}-[0-9]{1,5}$/ }&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;こんな感じ。&lt;/p&gt;</content><author><name></name></author><category term="javascript" /><category term="vue.js" /><summary type="html">Vue.js アプリケーションのバリデーションに baianat/vee-validate: Simple Vue.js input validation plugin を使ってみた。いくつかはまったこと。</summary></entry><entry><title type="html">Sugar.js を Vue.js で使用する</title><link href="http://localhost:4000/2017/10/24/sugarjs-in-vuejs-application.html" rel="alternate" type="text/html" title="Sugar.js を Vue.js で使用する" /><published>2017-10-24T21:28:35+09:00</published><updated>2017-10-24T21:28:35+09:00</updated><id>http://localhost:4000/2017/10/24/sugarjs-in-vuejs-application</id><content type="html" xml:base="http://localhost:4000/2017/10/24/sugarjs-in-vuejs-application.html">&lt;p&gt;諸事情があって Vue.js のアプリケーションで &lt;a href=&quot;https://sugarjs.com/&quot;&gt;Sugar - A Javascript utility library for working with native objects.&lt;/a&gt; を利用することにしたので導入のメモ。&lt;br /&gt;
アプリケーションは vue-cli を使って作成したもの。&lt;/p&gt;

&lt;h2 id=&quot;インストール&quot;&gt;インストール&lt;/h2&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;npm &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;sugar &lt;span class=&quot;nt&quot;&gt;--save&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;ロード&quot;&gt;ロード&lt;/h2&gt;

&lt;p&gt;main.js でロードし Extended mode で使用する。&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Vue&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'vue'&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Sugar&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'sugar'&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;Sugar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;extend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;ja-ロケールのロード&quot;&gt;ja ロケールのロード&lt;/h2&gt;

&lt;p&gt;デフォルトでは en ロケールしか利用できないので ja ロケールを設定する。&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Vue&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'vue'&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Sugar&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'sugar'&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;Sugar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;extend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'sugar/locales/ja'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setLocale&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'ja'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name></name></author><category term="javascript" /><category term="sugar.js" /><category term="vue.js" /><summary type="html">諸事情があって Vue.js のアプリケーションで Sugar - A Javascript utility library for working with native objects. を利用することにしたので導入のメモ。 アプリケーションは vue-cli を使って作成したもの。</summary></entry><entry><title type="html">rails-flog gem をアップデートした</title><link href="http://localhost:4000/2017/10/01/update-rails-flog-to-v1_4_0.html" rel="alternate" type="text/html" title="rails-flog gem をアップデートした" /><published>2017-10-01T20:22:09+09:00</published><updated>2017-10-01T20:22:09+09:00</updated><id>http://localhost:4000/2017/10/01/update-rails-flog-to-v1_4_0</id><content type="html" xml:base="http://localhost:4000/2017/10/01/update-rails-flog-to-v1_4_0.html">&lt;p&gt;先日作成した &lt;a href=&quot;https://github.com/pinzolo/spwd&quot;&gt;pinzolo/spwd: Secret file based password management tool&lt;/a&gt; をアップデートしたついでにふと &lt;a href=&quot;https://github.com/pinzolo/rails-flog&quot;&gt;pinzolo/rails-flog: Rails log formatter for Parameters and SQL&lt;/a&gt; を覗いてみた。すると、なんか issue が 3 とかなってる。&lt;/p&gt;

&lt;p&gt;んで &lt;a href=&quot;https://github.com/pinzolo/rails-flog/issues/17&quot;&gt;compatibility for Rails5.1 · Issue #17 · pinzolo/rails-flog&lt;/a&gt; という issue が登録されている。あれ？？そんなメールは Github から来た覚えないぞ？？どうしてだ？&lt;/p&gt;

&lt;p&gt;内容は Rails5.1 で動かないよって話。 &lt;code class=&quot;highlighter-rouge&quot;&gt;alias_method_chain&lt;/code&gt; が削除されるって話は知っていたので &lt;code class=&quot;highlighter-rouge&quot;&gt;prepend&lt;/code&gt; に書き直さなきゃなと思って忘れていた。&lt;/p&gt;

&lt;p&gt;というわけで作業ログ&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;まずは確実に動くRails.4.2環境に固定してテストが通ることを確認。&lt;a href=&quot;https://github.com/pinzolo/rails-flog/commit/47f619788d2af1c28af17bcd1e9f7cd36196bbaa&quot;&gt;#17 Fiv version for passing test · pinzolo/rails-flog@47f6197&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;alias_method_chain&lt;/code&gt; やめて &lt;code class=&quot;highlighter-rouge&quot;&gt;prepend&lt;/code&gt; にする。&lt;a href=&quot;https://github.com/pinzolo/rails-flog/commit/c70a5f3d3e76265515f8b0d52b814f2a860ddccd&quot;&gt;#17 Use prepend insted of alias_method_chain. alias_method_chain is d… · pinzolo/rails-flog@c70a5f3&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;いろいろ警告が出ていたので対応。&lt;a href=&quot;https://github.com/pinzolo/rails-flog/commit/85f5e02e700ebc70f35cd970a6d41648d215a247&quot;&gt;#17 Remove warning · pinzolo/rails-flog@85f5e02&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;テストが通ったので master にマージするためバージョン指定を元に戻す。&lt;a href=&quot;https://github.com/pinzolo/rails-flog/commit/bad5a4662ee894654e958b012cb9c26298a69f9a&quot;&gt;#17 Restore dependency version · pinzolo/rails-flog@bad5a46&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Rails5.0にバージョン指定。&lt;a href=&quot;https://github.com/pinzolo/rails-flog/commit/cff5d617c4d226e9a734c082fc625764f0da6cac&quot;&gt;#17 Set rails version to 5.0.x · pinzolo/rails-flog@cff5d61&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Rails 5.0 に対応（1 commit にしてしまったので変更点を列挙）&lt;a href=&quot;https://github.com/pinzolo/rails-flog/commit/973f3af19572559329f88a12a92068452746c7bc&quot;&gt;#17 Rails 5.0 compatible · pinzolo/rails-flog@973f3af&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;render nothing: true&lt;/code&gt; は削除されるよって警告が出てきたので &lt;code class=&quot;highlighter-rouge&quot;&gt;head&lt;/code&gt; に変更。&lt;/li&gt;
  &lt;li&gt;テスト時に使用する &lt;code class=&quot;highlighter-rouge&quot;&gt;get&lt;/code&gt; メソッドのパラメータ指定形式が変わるよっていうので対応したら、4.2で通らなくなったので苦肉の策で対応。&lt;/li&gt;
  &lt;li&gt;Rails 5.0 になったらパラメータの順序が入れ替わったので、順序を気にしなくていいようにログの文字列から Hash を作って中身比較。&lt;/li&gt;
  &lt;li&gt;テストが通ったので master にマージするためバージョン指定を元に戻す。&lt;a href=&quot;https://github.com/pinzolo/rails-flog/commit/1f87c2b1d17b5b7f90f618930bc1f1dee3f7915c&quot;&gt;#17 Restore rails version dependency · pinzolo/rails-flog@1f87c2b&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;バージョン変更はコミットする必要ないことに気づく&lt;/li&gt;
  &lt;li&gt;SQLがキャッシュの場合、以前は &lt;code class=&quot;highlighter-rouge&quot;&gt;event.payload[:name]&lt;/code&gt; に &lt;code class=&quot;highlighter-rouge&quot;&gt;CACHE&lt;/code&gt; という文字列が入っていたが、Rails 5.1 では &lt;code class=&quot;highlighter-rouge&quot;&gt;event.payload[:cached]&lt;/code&gt; で判断すればよいみたい&lt;a href=&quot;https://github.com/pinzolo/rails-flog/commit/c3123a3db95d4416caff810c4968aa3f77dddefd&quot;&gt;#17 cached query is judged by payload[:cached] instead of payload[:na… · pinzolo/rails-flog@c3123a3&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Tavis CI の設定変更。&lt;code class=&quot;highlighter-rouge&quot;&gt;prepend&lt;/code&gt; の使用できない Ruby 1.9.3 はサヨウナラして新しい Ruby と Rails のバージョンに対応する。&lt;a href=&quot;https://github.com/pinzolo/rails-flog/commit/5cca3487c0de93f5e37e6bd59e35d8c886b71b20&quot;&gt;#17 Add new versions for CI · pinzolo/rails-flog@5cca348&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Ruby2.0以上だけのサポートになったのでマジックコメントはいらない&lt;a href=&quot;https://github.com/pinzolo/rails-flog/commit/22543301f8b6824e671bf62b0951845997ad5eea&quot;&gt;Remove magic comment. #17 · pinzolo/rails-flog@2254330&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;珍しく一発で全パターンのCIが通ったのでバージョンを上げる&lt;a href=&quot;https://github.com/pinzolo/rails-flog/commit/a6a2919ea525a5fa23301eac31bee80672ee4843&quot;&gt;#17 Up to v1.4.0 · pinzolo/rails-flog@a6a2919&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;bundle exec rake release&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;お疲れ様でした。&lt;/p&gt;</content><author><name></name></author><category term="ruby" /><category term="rubygems" /><summary type="html">先日作成した pinzolo/spwd: Secret file based password management tool をアップデートしたついでにふと pinzolo/rails-flog: Rails log formatter for Parameters and SQL を覗いてみた。すると、なんか issue が 3 とかなってる。</summary></entry><entry><title type="html">spwdというパスワード管理ツールを作った</title><link href="http://localhost:4000/2017/09/28/spwd-is-secret-file-based-password-manager.html" rel="alternate" type="text/html" title="spwdというパスワード管理ツールを作った" /><published>2017-09-28T21:07:34+09:00</published><updated>2017-09-28T21:07:34+09:00</updated><id>http://localhost:4000/2017/09/28/spwd-is-secret-file-based-password-manager</id><content type="html" xml:base="http://localhost:4000/2017/09/28/spwd-is-secret-file-based-password-manager.html">&lt;h2 id=&quot;はじめに&quot;&gt;はじめに&lt;/h2&gt;

&lt;p&gt;みなさんパスワード管理どうしてますか？&lt;br /&gt;
Webサービスのアカウントならブラウザや LastPass のようなサービスが利用できるけど、まだまだパスワードでログインしなければいけないサーバがあったり
&lt;code class=&quot;highlighter-rouge&quot;&gt;psql&lt;/code&gt; や &lt;code class=&quot;highlighter-rouge&quot;&gt;mysql&lt;/code&gt; コマンドでパスワード入力したりしなければならなかったりしませんか？&lt;/p&gt;

&lt;p&gt;全部が秘密鍵で済むような環境になればいいけど、少なくとも自分を取り巻く環境はそうなっていません。
意味のある文字列ならまだしも、ランダムな英数字とか覚えておくにも限界があるし、いざ入力するときも手間がかかる。&lt;/p&gt;

&lt;p&gt;まだまだ僕たちはパスワード管理から自由になれないようです。ならせめてセキュアにパスワード管理できて、入力補助的なことができるととうれしい。&lt;/p&gt;

&lt;h2 id=&quot;というわけで&quot;&gt;というわけで&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/pinzolo/spwd&quot;&gt;pinzolo/spwd: Secret file based password management tool&lt;/a&gt; というものを作ってみた。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/20170928_spwd-sample.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;こんな感じで利用します。&lt;/p&gt;

&lt;h2 id=&quot;何やってるのか&quot;&gt;何やってるのか？&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;spwd new&lt;/code&gt; で対話形式でパスワードをデータファイルに保存します。このとき、特定のファイル（以下キーファイル）のハッシュをキーにしてで暗号化しています。&lt;br /&gt;
キーファイルはデフォルトでは &lt;code class=&quot;highlighter-rouge&quot;&gt;~/.ssh/id_rsa&lt;/code&gt; を使用しますが、これは &lt;strong&gt;このツールを使うような人はたいてい持っていて&lt;/strong&gt; かつ &lt;strong&gt;本人しか知り得ないはずのもの&lt;/strong&gt; だから都合がよかったからで、
SSHの秘密鍵を利用されるのは気持ち悪いという人は &lt;code class=&quot;highlighter-rouge&quot;&gt;~/.config/spwd/config.yml&lt;/code&gt; に設定を書けば別のファイルをキーにすることができます。ついでにデータファイルの場所も変更できます。（デフォルトは &lt;code class=&quot;highlighter-rouge&quot;&gt;~/.local/share/spwd/data.dat&lt;/code&gt;）&lt;br /&gt;
ファイルのハッシュを利用しているのでキーファイルの中身は別にRSA形式じゃなくてもOKです。ぶっちゃけなんでもOKです。&lt;/p&gt;

&lt;h2 id=&quot;そのほかつらつらと&quot;&gt;そのほかつらつらと&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;キーファイルさえ流出しなければ、データファイルは Dropbox とかで同期しても大丈夫だよね。&lt;/li&gt;
  &lt;li&gt;キーファイルは自分さえ知り得ない長めの文字列なんかを各環境でファイルに保存すればネットワーク介さなくてもいいから安全だよね。&lt;/li&gt;
  &lt;li&gt;キーファイル配置先のパーミッションはちゃんとやろうね。SSH と同じだよ。&lt;/li&gt;
  &lt;li&gt;万が一キーファイルが漏れたりしたら、新しいキーファイルを用意して &lt;code class=&quot;highlighter-rouge&quot;&gt;spwd migrate /path/to/new/key/file&lt;/code&gt; とすればカレントディレクトリに新しいデータファイルを生成するよ。（上書きするわけではない）&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;spwd new&lt;/code&gt; の時に同じ Name を指定すれば、上書きするかどうかを聞いてくるので Description の更新もこっちでやってね。&lt;/li&gt;
  &lt;li&gt;はじめはパスワードだけ暗号化していたけどやめた。Name や Description をエディタで更新できるメリットよりも、それらがヒントになってしまうデメリットのほうが高い気がする。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;そんなわけで、興味があれば慎重に使ってみてください。&lt;/p&gt;</content><author><name></name></author><category term="golang" /><category term="password" /><category term="security" /><summary type="html">はじめに</summary></entry></feed>